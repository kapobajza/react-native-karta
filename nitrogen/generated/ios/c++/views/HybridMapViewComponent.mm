///
/// HybridMapViewComponent.mm
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#import "HybridMapViewComponent.hpp"
#import <memory>
#import <react/renderer/componentregistry/ComponentDescriptorProvider.h>
#import <React/RCTViewComponentView.h>
#import <React/RCTComponentViewFactory.h>
#import <React/UIView+ComponentViewProtocol.h>
#import <NitroModules/NitroDefines.hpp>
#import <UIKit/UIKit.h>

#import "HybridMapViewSpecSwift.hpp"
#import "Karta-Swift-Cxx-Umbrella.hpp"

using namespace facebook;
using namespace margelo::nitro::karta;
using namespace margelo::nitro::karta::views;

/**
 * Represents the React Native View holder for the Nitro "MapView" HybridView.
 */
@interface HybridMapViewComponent: RCTViewComponentView
@end

@implementation HybridMapViewComponent {
  std::shared_ptr<HybridMapViewSpecSwift> _hybridView;
}

+ (void) load {
  [super load];
  [RCTComponentViewFactory.currentComponentViewFactory registerComponentViewClass:[HybridMapViewComponent class]];
}

+ (react::ComponentDescriptorProvider) componentDescriptorProvider {
  return react::concreteComponentDescriptorProvider<HybridMapViewComponentDescriptor>();
}

- (instancetype) init {
  if (self = [super init]) {
    std::shared_ptr<HybridMapViewSpec> hybridView = Karta::KartaAutolinking::createMapView();
    _hybridView = std::dynamic_pointer_cast<HybridMapViewSpecSwift>(hybridView);
    [self updateView];
  }
  return self;
}

- (void) updateView {
  // 1. Get Swift part
  Karta::HybridMapViewSpec_cxx& swiftPart = _hybridView->getSwiftPart();

  // 2. Get UIView*
  void* viewUnsafe = swiftPart.getView();
  UIView* view = (__bridge_transfer UIView*) viewUnsafe;

  // 3. Update RCTViewComponentView's [contentView]
  [self setContentView:view];
}

- (void) updateProps:(const std::shared_ptr<const react::Props>&)props
            oldProps:(const std::shared_ptr<const react::Props>&)oldProps {
  // 1. Downcast props
  const auto& newViewPropsConst = *std::static_pointer_cast<HybridMapViewProps const>(props);
  auto& newViewProps = const_cast<HybridMapViewProps&>(newViewPropsConst);
  Karta::HybridMapViewSpec_cxx& swiftPart = _hybridView->getSwiftPart();

  // 2. Update each prop individually
  swiftPart.beforeUpdate();

  // latitude: number
  if (newViewProps.latitude.isDirty) {
    swiftPart.setLatitude(newViewProps.latitude.value);
    newViewProps.latitude.isDirty = false;
  }
  // longitude: number
  if (newViewProps.longitude.isDirty) {
    swiftPart.setLongitude(newViewProps.longitude.value);
    newViewProps.longitude.isDirty = false;
  }
  // zoom: number
  if (newViewProps.zoom.isDirty) {
    swiftPart.setZoom(newViewProps.zoom.value);
    newViewProps.zoom.isDirty = false;
  }
  // children: optional
  if (newViewProps.children.isDirty) {
    swiftPart.setChildren(newViewProps.children.value);
    newViewProps.children.isDirty = false;
  }

  swiftPart.afterUpdate();

  // 3. Update hybridRef if it changed
  if (newViewProps.hybridRef.isDirty) {
    // hybridRef changed - call it with new this
    const auto& maybeFunc = newViewProps.hybridRef.value;
    if (maybeFunc.has_value()) {
      maybeFunc.value()(_hybridView);
    }
    newViewProps.hybridRef.isDirty = false;
  }

  // 4. Continue in base class
  [super updateProps:props oldProps:oldProps];
}

@end
