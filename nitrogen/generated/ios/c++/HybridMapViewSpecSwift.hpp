///
/// HybridMapViewSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridMapViewSpec.hpp"

// Forward declaration of `HybridMapViewSpec_cxx` to properly resolve imports.
namespace Karta { class HybridMapViewSpec_cxx; }

// Forward declaration of `MapViewChildren` to properly resolve imports.
namespace margelo::nitro::karta { struct MapViewChildren; }
// Forward declaration of `MapViewChildProps` to properly resolve imports.
namespace margelo::nitro::karta { struct MapViewChildProps; }

#include "MapViewChildren.hpp"
#include <vector>
#include <variant>
#include <optional>
#include <string>
#include "MapViewChildProps.hpp"

#include "Karta-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::karta {

  /**
   * The C++ part of HybridMapViewSpec_cxx.swift.
   *
   * HybridMapViewSpecSwift (C++) accesses HybridMapViewSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridMapViewSpec_cxx can directly inherit from the C++ class HybridMapViewSpec
   * to simplify the whole structure and memory management.
   */
  class HybridMapViewSpecSwift: public virtual HybridMapViewSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridMapViewSpecSwift(const Karta::HybridMapViewSpec_cxx& swiftPart):
      HybridObject(HybridMapViewSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline Karta::HybridMapViewSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    inline double getLatitude() noexcept override {
      return _swiftPart.getLatitude();
    }
    inline void setLatitude(double latitude) noexcept override {
      _swiftPart.setLatitude(std::forward<decltype(latitude)>(latitude));
    }
    inline double getLongitude() noexcept override {
      return _swiftPart.getLongitude();
    }
    inline void setLongitude(double longitude) noexcept override {
      _swiftPart.setLongitude(std::forward<decltype(longitude)>(longitude));
    }
    inline double getZoom() noexcept override {
      return _swiftPart.getZoom();
    }
    inline void setZoom(double zoom) noexcept override {
      _swiftPart.setZoom(std::forward<decltype(zoom)>(zoom));
    }
    inline std::optional<std::variant<MapViewChildren, std::vector<MapViewChildren>>> getChildren() noexcept override {
      auto __result = _swiftPart.getChildren();
      return __result;
    }
    inline void setChildren(const std::optional<std::variant<MapViewChildren, std::vector<MapViewChildren>>>& children) noexcept override {
      _swiftPart.setChildren(children);
    }

  public:
    // Methods
    

  private:
    Karta::HybridMapViewSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::karta
