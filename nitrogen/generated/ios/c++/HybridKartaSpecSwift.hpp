///
/// HybridKartaSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridKartaSpec.hpp"

// Forward declaration of `HybridKartaSpec_cxx` to properly resolve imports.
namespace Karta { class HybridKartaSpec_cxx; }





#include "Karta-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::karta {

  /**
   * The C++ part of HybridKartaSpec_cxx.swift.
   *
   * HybridKartaSpecSwift (C++) accesses HybridKartaSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridKartaSpec_cxx can directly inherit from the C++ class HybridKartaSpec
   * to simplify the whole structure and memory management.
   */
  class HybridKartaSpecSwift: public virtual HybridKartaSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridKartaSpecSwift(const Karta::HybridKartaSpec_cxx& swiftPart):
      HybridObject(HybridKartaSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline Karta::HybridKartaSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    inline bool getIsRed() noexcept override {
      return _swiftPart.isRed();
    }
    inline void setIsRed(bool isRed) noexcept override {
      _swiftPart.setIsRed(std::forward<decltype(isRed)>(isRed));
    }

  public:
    // Methods
    

  private:
    Karta::HybridKartaSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::karta
