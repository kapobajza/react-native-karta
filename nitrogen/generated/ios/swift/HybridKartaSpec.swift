///
/// HybridKartaSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridKartaSpec``
public protocol HybridKartaSpec_protocol: HybridObject, HybridView {
  // Properties
  var isRed: Bool { get set }

  // Methods
  
}

/// See ``HybridKartaSpec``
open class HybridKartaSpec_base {
  private weak var cxxWrapper: HybridKartaSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridKartaSpec_cxx {
  #if DEBUG
    guard self is HybridKartaSpec else {
      fatalError("`self` is not a `HybridKartaSpec`! Did you accidentally inherit from `HybridKartaSpec_base` instead of `HybridKartaSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridKartaSpec_cxx(self as! HybridKartaSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the Karta HybridObject.
 * Implement this protocol to create Swift-based instances of Karta.
 * ```swift
 * class HybridKarta : HybridKartaSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridKartaSpec = HybridKartaSpec_protocol & HybridKartaSpec_base
