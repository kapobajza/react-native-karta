///
/// MapViewChildren.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `MapViewChildren`, backed by a C++ struct.
 */
public typealias MapViewChildren = margelo.nitro.karta.MapViewChildren

public extension MapViewChildren {
  private typealias bridge = margelo.nitro.karta.bridge.swift

  /**
   * Create a new instance of `MapViewChildren`.
   */
  init(key: String?, props: MapViewChildProps) {
    self.init({ () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = key {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), props)
  }

  var key: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__key) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__key)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__key = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var props: MapViewChildProps {
    @inline(__always)
    get {
      return self.__props
    }
    @inline(__always)
    set {
      self.__props = newValue
    }
  }
}
