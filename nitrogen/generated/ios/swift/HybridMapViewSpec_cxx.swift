///
/// HybridMapViewSpec_cxx.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/**
 * A class implementation that bridges HybridMapViewSpec over to C++.
 * In C++, we cannot use Swift protocols - so we need to wrap it in a class to make it strongly defined.
 *
 * Also, some Swift types need to be bridged with special handling:
 * - Enums need to be wrapped in Structs, otherwise they cannot be accessed bi-directionally (Swift bug: https://github.com/swiftlang/swift/issues/75330)
 * - Other HybridObjects need to be wrapped/unwrapped from the Swift TCxx wrapper
 * - Throwing methods need to be wrapped with a Result<T, Error> type, as exceptions cannot be propagated to C++
 */
open class HybridMapViewSpec_cxx {
  /**
   * The Swift <> C++ bridge's namespace (`margelo::nitro::karta::bridge::swift`)
   * from `Karta-Swift-Cxx-Bridge.hpp`.
   * This contains specialized C++ templates, and C++ helper functions that can be accessed from Swift.
   */
  public typealias bridge = margelo.nitro.karta.bridge.swift

  /**
   * Holds an instance of the `HybridMapViewSpec` Swift protocol.
   */
  private var __implementation: any HybridMapViewSpec

  /**
   * Holds a weak pointer to the C++ class that wraps the Swift class.
   */
  private var __cxxPart: bridge.std__weak_ptr_HybridMapViewSpec_

  /**
   * Create a new `HybridMapViewSpec_cxx` that wraps the given `HybridMapViewSpec`.
   * All properties and methods bridge to C++ types.
   */
  public init(_ implementation: any HybridMapViewSpec) {
    self.__implementation = implementation
    self.__cxxPart = .init()
    /* no base class */
  }

  /**
   * Get the actual `HybridMapViewSpec` instance this class wraps.
   */
  @inline(__always)
  public func getHybridMapViewSpec() -> any HybridMapViewSpec {
    return __implementation
  }

  /**
   * Casts this instance to a retained unsafe raw pointer.
   * This acquires one additional strong reference on the object!
   */
  public func toUnsafe() -> UnsafeMutableRawPointer {
    return Unmanaged.passRetained(self).toOpaque()
  }

  /**
   * Casts an unsafe pointer to a `HybridMapViewSpec_cxx`.
   * The pointer has to be a retained opaque `Unmanaged<HybridMapViewSpec_cxx>`.
   * This removes one strong reference from the object!
   */
  public class func fromUnsafe(_ pointer: UnsafeMutableRawPointer) -> HybridMapViewSpec_cxx {
    return Unmanaged<HybridMapViewSpec_cxx>.fromOpaque(pointer).takeRetainedValue()
  }

  /**
   * Gets (or creates) the C++ part of this Hybrid Object.
   * The C++ part is a `std::shared_ptr<HybridMapViewSpec>`.
   */
  public func getCxxPart() -> bridge.std__shared_ptr_HybridMapViewSpec_ {
    let cachedCxxPart = self.__cxxPart.lock()
    if cachedCxxPart.__convertToBool() {
      return cachedCxxPart
    } else {
      let newCxxPart = bridge.create_std__shared_ptr_HybridMapViewSpec_(self.toUnsafe())
      __cxxPart = bridge.weakify_std__shared_ptr_HybridMapViewSpec_(newCxxPart)
      return newCxxPart
    }
  }

  

  /**
   * Get the memory size of the Swift class (plus size of any other allocations)
   * so the JS VM can properly track it and garbage-collect the JS object if needed.
   */
  @inline(__always)
  public var memorySize: Int {
    return MemoryHelper.getSizeOf(self.__implementation) + self.__implementation.memorySize
  }

  /**
   * Call dispose() on the Swift class.
   * This _may_ be called manually from JS.
   */
  @inline(__always)
  public func dispose() {
    self.__implementation.dispose()
  }

  // Properties
  public final var latitude: Double {
    @inline(__always)
    get {
      return self.__implementation.latitude
    }
    @inline(__always)
    set {
      self.__implementation.latitude = newValue
    }
  }
  
  public final var longitude: Double {
    @inline(__always)
    get {
      return self.__implementation.longitude
    }
    @inline(__always)
    set {
      self.__implementation.longitude = newValue
    }
  }
  
  public final var zoom: Double {
    @inline(__always)
    get {
      return self.__implementation.zoom
    }
    @inline(__always)
    set {
      self.__implementation.zoom = newValue
    }
  }
  
  public final var children: bridge.std__optional_std__variant_MapViewChildren__std__vector_MapViewChildren___ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__variant_MapViewChildren__std__vector_MapViewChildren___ in
        if let __unwrappedValue = self.__implementation.children {
          return bridge.create_std__optional_std__variant_MapViewChildren__std__vector_MapViewChildren___({ () -> bridge.std__variant_MapViewChildren__std__vector_MapViewChildren__ in
            switch __unwrappedValue {
              case .first(let __value):
                return bridge.create_std__variant_MapViewChildren__std__vector_MapViewChildren__(__value)
              case .second(let __value):
                return bridge.create_std__variant_MapViewChildren__std__vector_MapViewChildren__({ () -> bridge.std__vector_MapViewChildren_ in
                  var __vector = bridge.create_std__vector_MapViewChildren_(__value.count)
                  for __item in __value {
                    __vector.push_back(__item)
                  }
                  return __vector
                }())
            }
          }().variant)
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.children = { () -> Variant_MapViewChildren__MapViewChildren_? in
        if bridge.has_value_std__optional_std__variant_MapViewChildren__std__vector_MapViewChildren___(newValue) {
          let __unwrapped = bridge.get_std__optional_std__variant_MapViewChildren__std__vector_MapViewChildren___(newValue)
          return { () -> Variant_MapViewChildren__MapViewChildren_ in
            let __variant = bridge.std__variant_MapViewChildren__std__vector_MapViewChildren__(__unwrapped)
            switch __variant.index() {
              case 0:
                let __actual = __variant.get_0()
                return .first(__actual)
              case 1:
                let __actual = __variant.get_1()
                return .second(__actual.map({ __item in __item }))
              default:
                fatalError("Variant can never have index \(__variant.index())!")
            }
          }()
        } else {
          return nil
        }
      }()
    }
  }

  // Methods
  public final func getView() -> UnsafeMutableRawPointer {
    return Unmanaged.passRetained(__implementation.view).toOpaque()
  }
  
  public final func beforeUpdate() {
    __implementation.beforeUpdate()
  }
  
  public final func afterUpdate() {
    __implementation.afterUpdate()
  }
}
