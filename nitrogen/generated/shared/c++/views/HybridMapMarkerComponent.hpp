///
/// HybridMapMarkerComponent.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <optional>
#include <NitroModules/NitroDefines.hpp>
#include <NitroModules/NitroHash.hpp>
#include <NitroModules/CachedProp.hpp>
#include <react/renderer/core/ConcreteComponentDescriptor.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/components/view/ConcreteViewShadowNode.h>
#include <react/renderer/components/view/ViewProps.h>

#include <memory>
#include "HybridMapMarkerSpec.hpp"
#include <functional>
#include <optional>

namespace margelo::nitro::karta::views {

  using namespace facebook;

  /**
   * The name of the actual native View.
   */
  extern const char HybridMapMarkerComponentName[];

  /**
   * Props for the "MapMarker" View.
   */
  class HybridMapMarkerProps final: public react::ViewProps {
  public:
    HybridMapMarkerProps() = default;
    HybridMapMarkerProps(const HybridMapMarkerProps&);
    HybridMapMarkerProps(const react::PropsParserContext& context,
                         const HybridMapMarkerProps& sourceProps,
                         const react::RawProps& rawProps);

  public:
    CachedProp<double> latitude;
    CachedProp<double> longitude;
    CachedProp<std::optional<std::function<void(const std::shared_ptr<HybridMapMarkerSpec>& /* ref */)>>> hybridRef;

  private:
    static bool filterObjectKeys(const std::string& propName);
  };

  /**
   * State for the "MapMarker" View.
   */
  class HybridMapMarkerState final {
  public:
    HybridMapMarkerState() = default;

  public:
    void setProps(const HybridMapMarkerProps& props) { _props.emplace(props); }
    const std::optional<HybridMapMarkerProps>& getProps() const { return _props; }

  public:
#ifdef ANDROID
  HybridMapMarkerState(const HybridMapMarkerState& /* previousState */, folly::dynamic /* data */) {}
  folly::dynamic getDynamic() const {
    throw std::runtime_error("HybridMapMarkerState does not support folly!");
  }
  react::MapBuffer getMapBuffer() const {
    throw std::runtime_error("HybridMapMarkerState does not support MapBuffer!");
  };
#endif

  private:
    std::optional<HybridMapMarkerProps> _props;
  };

  /**
   * The Shadow Node for the "MapMarker" View.
   */
  using HybridMapMarkerShadowNode = react::ConcreteViewShadowNode<HybridMapMarkerComponentName /* "HybridMapMarker" */,
                                                                  HybridMapMarkerProps /* custom props */,
                                                                  react::ViewEventEmitter /* default */,
                                                                  HybridMapMarkerState /* custom state */>;

  /**
   * The Component Descriptor for the "MapMarker" View.
   */
  class HybridMapMarkerComponentDescriptor final: public react::ConcreteComponentDescriptor<HybridMapMarkerShadowNode> {
  public:
    HybridMapMarkerComponentDescriptor(const react::ComponentDescriptorParameters& parameters);

  public:
    /**
     * A faster path for cloning props - reuses the caching logic from `HybridMapMarkerProps`.
     */
    std::shared_ptr<const react::Props> cloneProps(const react::PropsParserContext& context,
                                                   const std::shared_ptr<const react::Props>& props,
                                                   react::RawProps rawProps) const override;
#ifdef ANDROID
    void adopt(react::ShadowNode& shadowNode) const override;
#endif
  };

  /* The actual view for "MapMarker" needs to be implemented in platform-specific code. */

} // namespace margelo::nitro::karta::views
