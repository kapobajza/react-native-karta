///
/// HybridKartaComponent.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "HybridKartaComponent.hpp"

#include <string>
#include <exception>
#include <utility>
#include <NitroModules/NitroDefines.hpp>
#include <NitroModules/JSIConverter.hpp>
#include <react/renderer/core/RawValue.h>
#include <react/renderer/core/ShadowNode.h>
#include <react/renderer/core/ComponentDescriptor.h>
#include <react/renderer/components/view/ViewProps.h>

namespace margelo::nitro::karta::views {

  extern const char HybridKartaComponentName[] = "Karta";

  HybridKartaProps::HybridKartaProps(const react::PropsParserContext& context,
                                     const HybridKartaProps& sourceProps,
                                     const react::RawProps& rawProps):
    react::ViewProps(context, sourceProps, rawProps, filterObjectKeys),
    isRed([&]() -> CachedProp<bool> {
      try {
        const react::RawValue* rawValue = rawProps.at("isRed", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.isRed;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<bool>::fromRawValue(*runtime, value, sourceProps.isRed);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("Karta.isRed: ") + exc.what());
      }
    }()),
    hybridRef([&]() -> CachedProp<std::optional<std::function<void(const std::shared_ptr<HybridKartaSpec>& /* ref */)>>> {
      try {
        const react::RawValue* rawValue = rawProps.at("hybridRef", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.hybridRef;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::function<void(const std::shared_ptr<HybridKartaSpec>& /* ref */)>>>::fromRawValue(*runtime, value.asObject(*runtime).getProperty(*runtime, "f"), sourceProps.hybridRef);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("Karta.hybridRef: ") + exc.what());
      }
    }()) { }

  HybridKartaProps::HybridKartaProps(const HybridKartaProps& other):
    react::ViewProps(),
    isRed(other.isRed),
    hybridRef(other.hybridRef) { }

  bool HybridKartaProps::filterObjectKeys(const std::string& propName) {
    switch (hashString(propName)) {
      case hashString("isRed"): return true;
      case hashString("hybridRef"): return true;
      default: return false;
    }
  }

  HybridKartaComponentDescriptor::HybridKartaComponentDescriptor(const react::ComponentDescriptorParameters& parameters)
    : ConcreteComponentDescriptor(parameters,
                                  react::RawPropsParser(/* enableJsiParser */ true)) {}

  std::shared_ptr<const react::Props> HybridKartaComponentDescriptor::cloneProps(const react::PropsParserContext& context,
                                                                                 const std::shared_ptr<const react::Props>& props,
                                                                                 react::RawProps rawProps) const {
    // 1. Prepare raw props parser
    rawProps.parse(rawPropsParser_);
    // 2. Copy props with Nitro's cached copy constructor
    return HybridKartaShadowNode::Props(context, /* & */ rawProps, props);
  }

#ifdef ANDROID
  void HybridKartaComponentDescriptor::adopt(react::ShadowNode& shadowNode) const {
    // This is called immediately after `ShadowNode` is created, cloned or in progress.
    // On Android, we need to wrap props in our state, which gets routed through Java and later unwrapped in JNI/C++.
    auto& concreteShadowNode = dynamic_cast<HybridKartaShadowNode&>(shadowNode);
    const HybridKartaProps& props = concreteShadowNode.getConcreteProps();
    HybridKartaState state;
    state.setProps(props);
    concreteShadowNode.setStateData(std::move(state));
  }
#endif

} // namespace margelo::nitro::karta::views
