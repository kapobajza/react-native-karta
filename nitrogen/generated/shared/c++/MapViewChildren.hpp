///
/// MapViewChildren.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `MapViewChildProps` to properly resolve imports.
namespace margelo::nitro::karta { struct MapViewChildProps; }

#include <string>
#include <optional>
#include "MapViewChildProps.hpp"

namespace margelo::nitro::karta {

  /**
   * A struct which can be represented as a JavaScript object (MapViewChildren).
   */
  struct MapViewChildren {
  public:
    std::optional<std::string> key     SWIFT_PRIVATE;
    MapViewChildProps props     SWIFT_PRIVATE;

  public:
    MapViewChildren() = default;
    explicit MapViewChildren(std::optional<std::string> key, MapViewChildProps props): key(key), props(props) {}
  };

} // namespace margelo::nitro::karta

namespace margelo::nitro {

  // C++ MapViewChildren <> JS MapViewChildren (object)
  template <>
  struct JSIConverter<margelo::nitro::karta::MapViewChildren> final {
    static inline margelo::nitro::karta::MapViewChildren fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::karta::MapViewChildren(
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "key")),
        JSIConverter<margelo::nitro::karta::MapViewChildProps>::fromJSI(runtime, obj.getProperty(runtime, "props"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::karta::MapViewChildren& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "key", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.key));
      obj.setProperty(runtime, "props", JSIConverter<margelo::nitro::karta::MapViewChildProps>::toJSI(runtime, arg.props));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "key"))) return false;
      if (!JSIConverter<margelo::nitro::karta::MapViewChildProps>::canConvert(runtime, obj.getProperty(runtime, "props"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
