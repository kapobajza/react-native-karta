///
/// JHybridMapViewSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridMapViewSpec.hpp"

// Forward declaration of `MapViewChildren` to properly resolve imports.
namespace margelo::nitro::karta { struct MapViewChildren; }
// Forward declaration of `MapViewChildProps` to properly resolve imports.
namespace margelo::nitro::karta { struct MapViewChildProps; }

#include "MapViewChildren.hpp"
#include <vector>
#include <variant>
#include <optional>
#include "JVariant_MapViewChildren_Array_MapViewChildren_.hpp"
#include "JMapViewChildren.hpp"
#include <string>
#include "MapViewChildProps.hpp"
#include "JMapViewChildProps.hpp"

namespace margelo::nitro::karta {

  jni::local_ref<JHybridMapViewSpec::jhybriddata> JHybridMapViewSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridMapViewSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridMapViewSpec::initHybrid),
    });
  }

  size_t JHybridMapViewSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridMapViewSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  double JHybridMapViewSpec::getLatitude() {
    static const auto method = javaClassStatic()->getMethod<double()>("getLatitude");
    auto __result = method(_javaPart);
    return __result;
  }
  void JHybridMapViewSpec::setLatitude(double latitude) {
    static const auto method = javaClassStatic()->getMethod<void(double /* latitude */)>("setLatitude");
    method(_javaPart, latitude);
  }
  double JHybridMapViewSpec::getLongitude() {
    static const auto method = javaClassStatic()->getMethod<double()>("getLongitude");
    auto __result = method(_javaPart);
    return __result;
  }
  void JHybridMapViewSpec::setLongitude(double longitude) {
    static const auto method = javaClassStatic()->getMethod<void(double /* longitude */)>("setLongitude");
    method(_javaPart, longitude);
  }
  double JHybridMapViewSpec::getZoom() {
    static const auto method = javaClassStatic()->getMethod<double()>("getZoom");
    auto __result = method(_javaPart);
    return __result;
  }
  void JHybridMapViewSpec::setZoom(double zoom) {
    static const auto method = javaClassStatic()->getMethod<void(double /* zoom */)>("setZoom");
    method(_javaPart, zoom);
  }
  std::optional<std::variant<MapViewChildren, std::vector<MapViewChildren>>> JHybridMapViewSpec::getChildren() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JVariant_MapViewChildren_Array_MapViewChildren_>()>("getChildren");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->toCpp()) : std::nullopt;
  }
  void JHybridMapViewSpec::setChildren(const std::optional<std::variant<MapViewChildren, std::vector<MapViewChildren>>>& children) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JVariant_MapViewChildren_Array_MapViewChildren_> /* children */)>("setChildren");
    method(_javaPart, children.has_value() ? JVariant_MapViewChildren_Array_MapViewChildren_::fromCpp(children.value()) : nullptr);
  }

  // Methods
  

} // namespace margelo::nitro::karta
