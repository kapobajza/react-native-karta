///
/// JMapViewChildren.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "MapViewChildren.hpp"

#include "JMapViewChildProps.hpp"
#include "MapViewChildProps.hpp"
#include <optional>
#include <string>

namespace margelo::nitro::karta {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "MapViewChildren" and the the Kotlin data class "MapViewChildren".
   */
  struct JMapViewChildren final: public jni::JavaClass<JMapViewChildren> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/karta/MapViewChildren;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct MapViewChildren by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    MapViewChildren toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldKey = clazz->getField<jni::JString>("key");
      jni::local_ref<jni::JString> key = this->getFieldValue(fieldKey);
      static const auto fieldProps = clazz->getField<JMapViewChildProps>("props");
      jni::local_ref<JMapViewChildProps> props = this->getFieldValue(fieldProps);
      return MapViewChildren(
        key != nullptr ? std::make_optional(key->toStdString()) : std::nullopt,
        props->toCpp()
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JMapViewChildren::javaobject> fromCpp(const MapViewChildren& value) {
      return newInstance(
        value.key.has_value() ? jni::make_jstring(value.key.value()) : nullptr,
        JMapViewChildProps::fromCpp(value.props)
      );
    }
  };

} // namespace margelo::nitro::karta
