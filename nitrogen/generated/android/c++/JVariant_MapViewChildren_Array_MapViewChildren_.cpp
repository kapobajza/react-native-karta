///
/// JVariant_MapViewChildren_Array_MapViewChildren_.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JVariant_MapViewChildren_Array_MapViewChildren_.hpp"

namespace margelo::nitro::karta {
  /**
   * Converts JVariant_MapViewChildren_Array_MapViewChildren_ to std::variant<MapViewChildren, std::vector<MapViewChildren>>
   */
  std::variant<MapViewChildren, std::vector<MapViewChildren>> JVariant_MapViewChildren_Array_MapViewChildren_::toCpp() const {
    if (isInstanceOf(JVariant_MapViewChildren_Array_MapViewChildren__impl::First::javaClassStatic())) {
      // It's a `MapViewChildren`
      auto jniValue = static_cast<const JVariant_MapViewChildren_Array_MapViewChildren__impl::First*>(this)->getValue();
      return jniValue->toCpp();
    } else if (isInstanceOf(JVariant_MapViewChildren_Array_MapViewChildren__impl::Second::javaClassStatic())) {
      // It's a `std::vector<MapViewChildren>`
      auto jniValue = static_cast<const JVariant_MapViewChildren_Array_MapViewChildren__impl::Second*>(this)->getValue();
      return [&]() {
      size_t __size = jniValue->size();
      std::vector<MapViewChildren> __vector;
      __vector.reserve(__size);
      for (size_t __i = 0; __i < __size; __i++) {
        auto __element = jniValue->getElement(__i);
        __vector.push_back(__element->toCpp());
      }
      return __vector;
    }();
    }
    throw std::invalid_argument("Variant is unknown Kotlin instance!");
  }
} // namespace margelo::nitro::karta
