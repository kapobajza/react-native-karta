///
/// JVariant_MapViewChildren_Array_MapViewChildren_.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include <variant>

#include "MapViewChildren.hpp"
#include <vector>
#include <variant>
#include "JMapViewChildren.hpp"
#include <string>
#include <optional>
#include "MapViewChildProps.hpp"
#include "JMapViewChildProps.hpp"

namespace margelo::nitro::karta {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ std::variant and the Java class "Variant_MapViewChildren_Array_MapViewChildren_".
   */
  class JVariant_MapViewChildren_Array_MapViewChildren_: public jni::JavaClass<JVariant_MapViewChildren_Array_MapViewChildren_> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/karta/Variant_MapViewChildren_Array_MapViewChildren_;";

    static jni::local_ref<JVariant_MapViewChildren_Array_MapViewChildren_> create_0(jni::alias_ref<JMapViewChildren> value) {
      static const auto method = javaClassStatic()->getStaticMethod<JVariant_MapViewChildren_Array_MapViewChildren_(jni::alias_ref<JMapViewChildren>)>("create");
      return method(javaClassStatic(), value);
    }
    static jni::local_ref<JVariant_MapViewChildren_Array_MapViewChildren_> create_1(jni::alias_ref<jni::JArrayClass<JMapViewChildren>> value) {
      static const auto method = javaClassStatic()->getStaticMethod<JVariant_MapViewChildren_Array_MapViewChildren_(jni::alias_ref<jni::JArrayClass<JMapViewChildren>>)>("create");
      return method(javaClassStatic(), value);
    }

    static jni::local_ref<JVariant_MapViewChildren_Array_MapViewChildren_> fromCpp(const std::variant<MapViewChildren, std::vector<MapViewChildren>>& variant) {
      switch (variant.index()) {
        case 0: return create_0(JMapViewChildren::fromCpp(std::get<0>(variant)));
        case 1: return create_1([&]() {
          size_t __size = std::get<1>(variant).size();
          jni::local_ref<jni::JArrayClass<JMapViewChildren>> __array = jni::JArrayClass<JMapViewChildren>::newArray(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            const auto& __element = std::get<1>(variant)[__i];
            __array->setElement(__i, *JMapViewChildren::fromCpp(__element));
          }
          return __array;
        }());
        default: throw std::invalid_argument("Variant holds unknown index! (" + std::to_string(variant.index()) + ")");
      }
    }

    [[nodiscard]] std::variant<MapViewChildren, std::vector<MapViewChildren>> toCpp() const;
  };

  namespace JVariant_MapViewChildren_Array_MapViewChildren__impl {
    class First: public jni::JavaClass<First, JVariant_MapViewChildren_Array_MapViewChildren_> {
    public:
      static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/karta/Variant_MapViewChildren_Array_MapViewChildren_$First;";
    
      [[nodiscard]] jni::local_ref<JMapViewChildren> getValue() const {
        static const auto field = javaClassStatic()->getField<JMapViewChildren>("value");
        return getFieldValue(field);
      }
    };
    
    class Second: public jni::JavaClass<Second, JVariant_MapViewChildren_Array_MapViewChildren_> {
    public:
      static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/karta/Variant_MapViewChildren_Array_MapViewChildren_$Second;";
    
      [[nodiscard]] jni::local_ref<jni::JArrayClass<JMapViewChildren>> getValue() const {
        static const auto field = javaClassStatic()->getField<jni::JArrayClass<JMapViewChildren>>("value");
        return getFieldValue(field);
      }
    };
  } // namespace JVariant_MapViewChildren_Array_MapViewChildren__impl
} // namespace margelo::nitro::karta
