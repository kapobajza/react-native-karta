///
/// JHybridMapViewStateUpdater.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridMapViewStateUpdater.hpp"
#include "views/HybridMapViewComponent.hpp"
#include <NitroModules/NitroDefines.hpp>

namespace margelo::nitro::karta::views {

using namespace facebook;
using ConcreteStateData = react::ConcreteState<HybridMapViewState>;

void JHybridMapViewStateUpdater::updateViewProps(jni::alias_ref<jni::JClass> /* class */,
                                           jni::alias_ref<JHybridMapViewSpec::javaobject> javaView,
                                           jni::alias_ref<JStateWrapper::javaobject> stateWrapperInterface) {
  JHybridMapViewSpec* view = javaView->cthis();

  // Get concrete StateWrapperImpl from passed StateWrapper interface object
  jobject rawStateWrapper = stateWrapperInterface.get();
  if (!stateWrapperInterface->isInstanceOf(react::StateWrapperImpl::javaClassStatic())) {
      throw std::runtime_error("StateWrapper is not a StateWrapperImpl");
  }
  auto stateWrapper = jni::alias_ref<react::StateWrapperImpl::javaobject>{
            static_cast<react::StateWrapperImpl::javaobject>(rawStateWrapper)};

  std::shared_ptr<const react::State> state = stateWrapper->cthis()->getState();
  auto concreteState = std::dynamic_pointer_cast<const ConcreteStateData>(state);
  const HybridMapViewState& data = concreteState->getData();
  const std::optional<HybridMapViewProps>& maybeProps = data.getProps();
  if (!maybeProps.has_value()) {
    // Props aren't set yet!
    throw std::runtime_error("HybridMapViewState's data doesn't contain any props!");
  }
  const HybridMapViewProps& props = maybeProps.value();
  if (props.latitude.isDirty) {
    view->setLatitude(props.latitude.value);
    // TODO: Set isDirty = false
  }
  if (props.longitude.isDirty) {
    view->setLongitude(props.longitude.value);
    // TODO: Set isDirty = false
  }
  if (props.zoom.isDirty) {
    view->setZoom(props.zoom.value);
    // TODO: Set isDirty = false
  }
  if (props.children.isDirty) {
    view->setChildren(props.children.value);
    // TODO: Set isDirty = false
  }

  // Update hybridRef if it changed
  if (props.hybridRef.isDirty) {
    // hybridRef changed - call it with new this
    const auto& maybeFunc = props.hybridRef.value;
    if (maybeFunc.has_value()) {
      std::shared_ptr<JHybridMapViewSpec> shared = javaView->cthis()->shared_cast<JHybridMapViewSpec>();
      maybeFunc.value()(shared);
    }
    // TODO: Set isDirty = false
  }
}

} // namespace margelo::nitro::karta::views
